@using System.Text.RegularExpressions;
@{
    string u = Request.ServerVariables["HTTP_USER_AGENT"];
    Regex b = new Regex(@"(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino", RegexOptions.IgnoreCase | RegexOptions.Multiline);
    Regex v = new Regex(@"1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-", RegexOptions.IgnoreCase | RegexOptions.Multiline);
    
    if (Session["id"] == null) {
        Response.Redirect("~/login.cshtml");
    }

    var Question = "";
    var Tags = "";
    var Answer = "";
    var course = "";
    var courseNameOutput = "";
    var lectureId = "";
    var lectureOutput = "";
    var successMessage = "";
    
    var selectcommand = "SELECT * FROM T_Lecture WHERE course_id = @0 ORDER BY date";
    var addcommand = "INSERT INTO T_Question (question, tags, creator_id) Values (@0, @1, @2)";
    var addrelation = "INSERT INTO T_Question_Lecture (question_id, lecture_id) Values (@0, @1)";
    var addanswer = "INSERT INTO T_Answer (question_id, answer, correct) Values (@0, @1, @2)";

    var db = Database.Open("102547-concepttest");
    var selected = db.Query("SELECT * FROM T_Course");
    
    if(IsPost && !Request["Submit"].IsEmpty())
    {
        Validation.RequireField("courses", "You must select a course");
        Validation.RequireField("lectures", "You must select a lecture");

        Validation.Add("Tags",
            Validator.StringLength(50, 0, "No more than 50 letters")
        );

        Validation.Add("Question", 
            Validator.Required("You must submit a question"), 
            Validator.StringLength(50, 0, "No more than 50 letters")
        );

        lectureId = Request.Form["lectures"];
        lectureOutput = db.QueryValue("SELECT date FROM T_Lecture WHERE id = @0", lectureId);

        if(Validation.IsValid()) {
            int count = Int16.Parse(Request.Form["counter"]);
            if(count >= 1) {

                Question = Request.Form["Question"];
                Tags = Request.Form["Tags"];
                bool transactionstatus = true;

                db.Execute("START TRANSACTION");
                    db.Execute(addcommand, Question, Tags, (int)(Session["id"]));
                    var id = db.GetLastInsertId();
                    db.Execute(addrelation, id, lectureId);
            
                    for(int k = 1; k <= count; k++) {
                        Answer = Request.Form[k.ToString()];
                        var correct = Request.Form[(k+10).ToString()];
                        if(Answer != null && Answer != "") {
                            if(correct == "correct") {
                                db.Execute(addanswer, id, Answer, 1);
                            }
                            else {
                                db.Execute(addanswer, id, Answer, 0);
                            }
                        }else{
                            transactionstatus = false;
                        }
                    }
                if(transactionstatus){
                    db.Execute("COMMIT");
                    successMessage = "Question successfully added to database!";
                }else{
                    db.Execute("ROLLBACK");
                }
            }
        }
    }  
}

<!DOCTYPE html>

<html lang="en">
    <head>
        <meta charset="utf-8" />
        @if ((b.IsMatch(u) || v.IsMatch(u.Substring(0, 4)))) {
            <link rel="stylesheet" type="text/css" href="StyleSheetMobile.css">
            <script src="~/fontsizescript.js" type="text/javascript"></script>
        }
        else {
            <link rel="stylesheet" type="text/css" href="StyleSheet.css">
        }
        <script src="~/Script.js" type="text/javascript"></script>
        <title>Manage question</title>
    </head>

    <body onload="scaleWidth();" onresize="scaleWidth();">
        @_includes.dashboard()
        @{
            //After the page reloads and a course was selected the dropdownlist containing lectures is filled with the course variable

            //Fill the first dropdownmenu with the matching lectures of the selected course
            course = Request.Form["courses"];
            var selectedlectures = db.Query(selectcommand, course);
            courseNameOutput = db.QueryValue("SELECT course_name FROM T_Course WHERE id = @0", course);

            //Fill the second dropdownmenu
            course = Request.Form["seletedquestion"];
            var selectedlecturesoldquestion = db.Query(selectcommand, course);
            
            //If a question was successfully added, show the confirmation page otherwise the regular one
            if(IsPost && !Request["Submit"].IsEmpty() && Validation.IsValid() && successMessage != "") {
                <div>
                    <p>Course: @courseNameOutput</p>
                    <p>Lecture: @lectureOutput</p>
                    <p>Question: @Question</p>
                    <h2>@successMessage</h2>
                    <p><a href="managequestion.cshtml">Add another question</a></p>
                </div>
            }else {
                <form method="post" id="Submit">
                    <div>
                        <h1>Add question</h1>
                        <hr>
                        <br>
                        <table class="invisborder">
                            <tr>
                                <td>Course:</td>
                                <td>
                                    <select id="courses" name="courses" onchange="updatelectures()">
                                        <option value="">-- Select course --</option>
                                        @foreach(var choice in selected) {
                                            if(Request.Form["courses"] == choice.id.ToString()) {
                                                <option value="@choice.id" selected>@choice.course_name</option>
                                            }
                                            else {
                                                <option value="@choice.id">@choice.course_name</option>
                                            }
                                        }
                                    </select>
                                    @Html.ValidationMessage("courses")
                                </td>
                                </tr>
                            <tr>
                                <td>Lecture:</td>
                                <td>
                                    <select id="lectures" name="lectures">
                                        <option value="" disabled>-- Select lecture --</option>
                                        @foreach(var matchinglectures in selectedlectures) {
                                            <option value="@matchinglectures.id">@matchinglectures.date</option>
                                        }
                                    </select>
                                    @Html.ValidationMessage("lectures")
                                </td>
                            </tr>
                            <tr>
                                <td>Question:</td> 
                                <td><input type="text" name="Question" size="16"/> @Html.ValidationMessage("Question")</td>
                            </tr>
                            <tr>
                                <td>Tags (optional):</td> 
                                <td><input type="text" name="Tags" size="16" /> @Html.ValidationMessage("Tags")</td>
                            </tr>
                        </table>

                        <p>Number of answers (max 10):<input type="button" name="addanswer" value="+" onclick="addform()" /> <input type="button" name="removeanswer" value="-" onclick="removeform()" /></p>
                        <p id="answerfield"></p>
                        
                        <p><input type="Submit" name="Submit" value="Submit" /><input type="hidden" id="counter" name="counter" value="0"/></p>            
                        <p><a href="dashboard.cshtml">Back to dashboard</a></p>
                    </div>
                    @{
                        //Some code for the search, add and remove old question section

                        var search = "";
                        var searchphrase = "SELECT * FROM T_Question WHERE tags LIKE @0";

                        var data = db.Query(searchphrase, "%" + search + "%");

                        search = Request.Form["searchphrase"];
                        data = db.Query(searchphrase, "%" + search + "%");
                        

                        if(IsPost && !Request["addoldquestion"].IsEmpty())
                        {
                            Validation.RequireField("selectquestion", "You must select a course");
                            Validation.RequireField("lecturesoldquestion", "You must select a lecture");
                            var control = "SELECT COUNT(*) FROM T_Question_Lecture WHERE question_id = @0 AND lecture_id = @1";

                            if(Validation.IsValid()){

                                if(0==(int)db.QueryValue(control, Request.Form["oldquestions"], Request.Form["lecturesoldquestion"])){
                                    var addoldquestion = "INSERT INTO T_Question_Lecture (question_id, lecture_id) Values (@0, @1)";
                                    db.Execute(addoldquestion, Request.Form["oldquestions"], Request.Form["lecturesoldquestion"]);
                                }else{
                                    Validation.AddFormError("The question already exist in this lecture");
                                }
                            }
                        }

                        if(IsPost && !Request["deletequestion"].IsEmpty())
                        {
                            Validation.RequireField("removequestion", "You must select a question");

                            if(Validation.IsValid()){
                                var removeCommand = "DELETE FROM T_Question WHERE T_Question.id = @0";
                                var removeRelation = "DELETE FROM T_Question_Lecture WHERE question_id = @0";
                                var removeAnswers = "DELETE FROM T_Answer where question_id = @0";
                                var removeStatistics = "DELETE FROM T_Statistics where question_id = @0";
                                var questionid = Request.Form["removequestion"];

                                    db.Execute("START TRANSACTION");
                                        db.Execute(removeRelation, questionid);
                                        db.Execute(removeCommand, questionid);
                                        db.Execute(removeAnswers, questionid);
                                        db.Execute(removeStatistics, questionid);
                                    db.Execute("COMMIT");
                            }
                        }
                    }
                    
                    <div>
                        <h1>Use existing question</h1>
                        <hr>
                        <br>
                        <table class="invisborder">
                            <tr>
                                <td>
                                        <input type="text" name="searchphrase" value="" />
                                        <input type="Submit" name="oldquestion" value="Search"/>
                                </td>
                            <tr>
                                <td>
                                    Matching questions:
                                            <select id="oldquestions" name="oldquestions">
                                                <option value="" disabled>-- Select question --</option>
                                                @foreach(var matchingquestions in data) {
                                                    <option value="@matchingquestions.id">@matchingquestions.question</option>
                                                }
                                            </select>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <select id="selectquestion" name="selectquestion" onchange="updatelectures()">
                                                <option value="">-- Select course --</option>
                                                @foreach(var choice in selected) {
                                                    if(Request.Form["selectquestion"] == choice.id.ToString()) {
                                                        <option value="@choice.id" selected>@choice.course_name</option>
                                                    }
                                                    else {
                                                        <option value="@choice.id">@choice.course_name</option>
                                                    }
                                                }
                                    </select>
                                    @Html.ValidationSummary()
                                    @Html.ValidationMessage("selectquestion")
                                </td>
                            </tr>
                            @{
                                course = Request.Form["selectquestion"];
                                selectedlecturesoldquestion = db.Query(selectcommand, course);
                            }
                            <tr>
                                <td>
                                    <select id="lecturesoldquestion" name="lecturesoldquestion">
                                                <option value="">-- Select lecture --</option>
                                                @foreach(var matchinglectures in selectedlecturesoldquestion) {
                                                    if(Request.Form["lecturesoldquestion"] == matchinglectures.id.ToString()){
                                                        <option value="@matchinglectures.id" selected>@matchinglectures.date</option>
                                                    }
                                                    else{
                                                        <option value="@matchinglectures.id">@matchinglectures.date</option>
                                                    }
                                                }
                                    </select>
                                    @Html.ValidationMessage("lecturesoldquestion")
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <input type="Submit" name="addoldquestion" value="Add to lecture" />
                                </td>
                            </tr>
                        </table>
                    </div>
                    @{
                        search = "";
                        searchphrase = "SELECT * FROM T_Question WHERE tags LIKE @0 AND T_Question.creator_id = @1";
                        search = Request.Form["removesearchphrase"];

                        var removedata = db.Query(searchphrase, "%" + search + "%", Session["id"]);
                    }
                    <div id="removequestion">
                        <h1>Remove old questions</h1>
                        <hr>
                        <table class="invisborder">
                            <tr>
                                <td>
                                        <input type="text" name="removesearchphrase" value="" />
                                        <input type="Submit" name="removeoldquestion" value="Search"/>
                                </td>
                            <tr>
                                <td>
                                    (Only questions created by yourself are visible)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Matching questions:
                                            <select id="removequestion" name="removequestion">
                                                <option value="">-- Select question --</option>
                                                @foreach(var matchingquestions in removedata) {
                                                    <option value="@matchingquestions.id">@matchingquestions.question</option>
                                                }
                                            </select>
                                            @Html.ValidationMessage("removequestion")
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <input type="Submit" name="deletequestion" value="Remove selected question" />
                                </td>
                            </tr>
                        </table>
                    </div>
                </form>
            }
        }
    </body>
</html>

@{
    if(db!=null) {
        db.Close();
    }
}
